**********************
Windows PowerShell transcript start
Start time: 20250923083058
Username: ASCENDI-03PBECJ\Ascendion
RunAs User: ASCENDI-03PBECJ\Ascendion
Configuration Name: 
Machine: ASCENDI-03PBECJ (Microsoft Windows NT 10.0.26100.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 480
PSVersion: 5.1.26100.4768
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.26100.4768
BuildVersion: 10.0.26100.4768
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\Users\pythonautomationtesting\QA-Training\automation-092025\json_python_activity.txt
PS C:\WINDOWS\system32> python
Python 3.13.7 (tags/v3.13.7:bcee1c3, Aug 14 2025, 14:15:11) [MSC v.1944 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import json
>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
>>>
>>> print(json.dumps("\"foo\bar"))
"\"foo\bar"
>>>
>>> print(json.dumps('\u1234'))
"\u1234"
>>>
>>> print(json.dumps('\\'))
"\\"
>>>
>>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
{"a": 0, "b": 0, "c": 0}
>>>
>>> from io import StringIO
>>> io = StringIO()
>>> json.dump(['streaming API'], io)
>>> io.getvalue()
'["streaming API"]'
>>> import json
>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
'[1,2,3,{"4":5,"6":7}]'
>>> import json
>>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))
{
    "4": 5,
    "6": 7
}
>>> import json
>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
['foo', {'bar': ['baz', None, 1.0, 2]}]
>>>
>>> json.loads('"\\"foo\\bar"')
'"foo\x08ar'
>>>
>>> from io import StringIO
>>> io = StringIO('["streaming API"]')
>>> json.load(io)
['streaming API']
>>> import json
>>>
>>> class ComplexEncoder(json.JSONEncoder):
...         def default(self, obj):
...                         if isinstance(obj, complex):
...                                             return [obj.real, obj.imag]
...                                                     # Let the base class default method raise the TypeError
...                                                             return super().default(obj)
...
  File "<python-input-29>", line 6
    return super().default(obj)
IndentationError: unexpected indent
>>> # Using json.dumps with custom encoder
>>> print(json.dumps(2 + 1j, cls=ComplexEncoder))
Traceback (most recent call last):
  File "<python-input-31>", line 1, in <module>
    print(json.dumps(2 + 1j, cls=ComplexEncoder))
                                 ^^^^^^^^^^^^^^
NameError: name 'ComplexEncoder' is not defined
>>>
>>> # Directly using encoder instance
>>> print(ComplexEncoder().encode(2 + 1j))
Traceback (most recent call last):
  File "<python-input-34>", line 1, in <module>
    print(ComplexEncoder().encode(2 + 1j))
          ^^^^^^^^^^^^^^
NameError: name 'ComplexEncoder' is not defined
>>>
>>> # Iteratively encoding
>>> print(list(ComplexEncoder().iterencode(2 + 1j)))
Traceback (most recent call last):
  File "<python-input-37>", line 1, in <module>
    print(list(ComplexEncoder().iterencode(2 + 1j)))
               ^^^^^^^^^^^^^^
NameError: name 'ComplexEncoder' is not defined
>>> exit()
PS C:\WINDOWS\system32> echo '{"json":"obj"}' | python -m json.tool
{
    "json": "obj"
}
PS C:\WINDOWS\system32> echo '{1.2:3.4}' | python -m json.tool
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
PS C:\WINDOWS\system32> Stop-Transcript
**********************
Windows PowerShell transcript end
End time: 20250923083312
**********************
